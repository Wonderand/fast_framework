package io.renren.controller;import io.renren.entity.DeleteRequest;import io.renren.entity.YcanOfdFilesEntity;import io.renren.service.YcanOfdFilesService;import io.renren.utils.PageUtils;import io.renren.utils.Query;import io.renren.utils.R;import org.springframework.core.io.InputStreamResource;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.annotation.Resource;import javax.xml.crypto.Data;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.net.URLEncoder;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.text.DecimalFormat;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.Date;import java.util.List;import java.util.Map;/** * @Classname YcanOfdFilesController * @Pakage: io.renren.controller * @Author: hzr * @Description TODO * @Date 2024/3/7 15:15 * @Created by 22906 * @Version 1.0.0 */@Controller@RequestMapping("/sys/file")public class YcanOfdFilesController {    @Resource    private YcanOfdFilesService ycanOfdFilesService;    /**     * 列表     */    @ResponseBody    @RequestMapping("/ofdlist")    public R ofdlist(@RequestParam Map<String, Object> params) {        PageUtils pageUtil = ycanOfdFilesService.queryList(new Query(params));        return R.ok().put("page", pageUtil);    }    @ResponseBody    @PostMapping(value = "/delete")    public R deleteFileById(@RequestBody DeleteRequest request) {        int id = Integer.parseInt(request.getId());        // 确保id是正数，或其他业务逻辑上合理的验证        if (id <= 0) {            return R.error("ID不合法，必须是正数");        }        ycanOfdFilesService.deleteById(id);        return R.ok("删除成功");    }    @ResponseBody    @RequestMapping("/upload")    public R upload(@RequestPart("file") MultipartFile file) throws IOException {        String uploadDir = System.getProperty("user.dir") + File.separator + "uploads";        Path dirPath = Paths.get(uploadDir);        if (!Files.exists(dirPath)) {            Files.createDirectories(dirPath);        }        String originalFilename = file.getOriginalFilename();        String filenameWithoutExtension = originalFilename.substring(0, originalFilename.lastIndexOf('.'));        Path filePath = dirPath.resolve(originalFilename);        if (Files.exists(filePath)) {            // 文件已存在，可以选择不保存文件，或者给文件添加一个唯一的后缀来避免覆盖            String timestampSuffix = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmssSSS"));            String newFilename = filenameWithoutExtension + "_" + timestampSuffix+".ofd";            filePath = dirPath.resolve(newFilename);        }        file.transferTo(filePath.toFile());        YcanOfdFilesEntity ycanOfdFilesEntity = new YcanOfdFilesEntity();        ycanOfdFilesEntity.setFileName(originalFilename);        ycanOfdFilesEntity.setFileSize(readableFileSize(file.getSize()));        ycanOfdFilesEntity.setFilePath(filePath.toString());        ycanOfdFilesEntity.setFileType("ofd");        ycanOfdFilesEntity.setUploadTime(new Date());        ycanOfdFilesService.save(ycanOfdFilesEntity);        return R.ok("上传成功");    }    @GetMapping(value = "/download/{id}",produces = "application/json;charset=UTF-8")    public ResponseEntity<InputStreamResource> download(@PathVariable String id) throws IOException {        int i = Integer.parseInt(id);        YcanOfdFilesEntity ycanOfdFilesEntity = ycanOfdFilesService.findById(i);        File file = new File(ycanOfdFilesEntity.getFilePath());        MediaType mediaType = MediaType.parseMediaType("application/ofd");        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));        return ResponseEntity.ok()                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + URLEncoder.encode(file.getName(), "UTF-8"))                .contentType(mediaType)                .contentLength(file.length())                .body(resource);    }    public String readableFileSize(long size) {        if (size <= 0) {            return "0";        }        final String[] units = new String[] { "B", "KB", "MB", "GB", "TB" };        int digitGroups = (int) (Math.log10(size)/Math.log10(1024));        return new DecimalFormat("#,##0.#").format(size/Math.pow(1024, digitGroups)) + " " + units[digitGroups];    }}